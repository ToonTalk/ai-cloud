<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="speak %&apos;text&apos; then %&apos;do this when finished&apos;" type="command" category="sound"><header></header><code></code><inputs><input type="%s"></input><input type="%cmdRing"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>message</l><l>finished_callback</l></list><l>var utterance = new SpeechSynthesisUtterance(message);&#xD;&#xD;if (typeof finished_callback === &apos;object&apos;) {&#xD;&#xD;   // callback provided&#xD;&#xD;   utterance.onend = function (event) {&#xD;&#xD;       invoke(finished_callback, new List([message]));&#xD;&#xD;   };&#xD;&#xD;}&#xD;&#xD;if (window.speech_recognition) {&#xD;&#xD;   window.speech_recognition.abort();&#xD;&#xD;}&#xD;&#xD;window.speechSynthesis.speak(utterance);&#xD;&#xD;</l></block><list><block var="text"/><block var="do this when finished"/></list></block></script></block-definition><block-definition s="listen and then %&apos;do with recognised words&apos; %&apos;do if nothing recognised&apos;" type="command" category="other"><header></header><code></code><inputs><input type="%cmdRing"></input><input type="%cmdRing"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>spoken_callback</l><l>error_callback</l></list><l>var restart = function () {&#xD;    if (window.speechSynthesis.speaking) { // don&apos;t listen while speaking&#xD;        setTimeout(restart, 500); // try again in half a second&#xD;        return;&#xD;    }&#xD;    try {&#xD;        window.speech_recognition.start();&#xD;        console.log("recognition started");&#xD;    } catch (error) {&#xD;        if (error.name === &apos;InvalidStateError&apos;) {&#xD;            // delay needed at least in Chrome 52&#xD;            setTimeout(restart, 2000);&#xD;        } else {&#xD;            console.log(error);&#xD;        }&#xD;    }&#xD;};&#xD;var handle_result = function (callback, event) {&#xD;    var spoken = event.results[0][0].transcript;&#xD;    console.log("Confidence is " + event.results[0][0].confidence + " for " + spoken);&#xD;    window.speech_recognition.stop();&#xD;    invoke(callback, new List([spoken]));&#xD;};&#xD;var handle_error = function (callback, event) {&#xD;    if (event.error === &apos;aborted&apos;) {&#xD;        console.log("aborted so restarting speech recognition in half a second");&#xD;        setTimeout(restart, 500);&#xD;        return;&#xD;    }&#xD;    if (event.error === &apos;no-speech&apos;) {&#xD;        window.speech_recognition.onend = null;&#xD;        window.speech_recognition.onresult = null;&#xD;        window.speech_recognition.stop();&#xD;    }&#xD;    console.log("Recognition error: " + event.error);&#xD;    if (typeof callback === &apos;object&apos;) {&#xD;        invoke(callback, new List([event.error]));&#xD;    }&#xD;};&#xD;if (!window.speech_recognition) {&#xD;    window.speech_recognition = (typeof SpeechRecognition === &apos;undefined&apos;) ? &#xD;        new webkitSpeechRecognition() :&#xD;        new SpeechRecognition();&#xD;}&#xD;window.speech_recognition.onresult = function (event) {&#xD;    handle_result(spoken_callback, event);&#xD;};&#xD;window.speech_recognition.onerror = function (event) {&#xD;    handle_error(error_callback, event);&#xD;};&#xD;window.speech_recognition.onend = function (event) {&#xD;    console.log("recognition ended");&#xD;    restart(); &#xD;};&#xD;restart();&#xD;</l></block><list><block var="do with recognised words"/><block var="do if nothing recognised"/></list></block></script></block-definition></blocks>