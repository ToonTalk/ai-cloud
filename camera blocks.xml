<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="setup camera %&apos;width&apos; %&apos;height&apos;" type="command" category="other"><comment w="90" collapsed="false">Declares the dimensions of the photo taken by &apos;&apos;ask &lt;provider&gt; to say what it sees. </comment><header></header><code></code><inputs><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>width</l><l>height</l></list><l>var video  = document.createElement(&apos;video&apos;);&#xD;var canvas = document.createElement(&apos;canvas&apos;);&#xD;&#xD;var get_global_variable_value = function (name) {&#xD;    var ancestor = this;&#xD;    var value;&#xD;    while (ancestor &amp;&amp; !(ancestor instanceof IDE_Morph)) {&#xD;        ancestor = ancestor.parent;&#xD;    }&#xD;    if (ancestor) {&#xD;        value = ancestor.globalVariables.getVar(name);&#xD;    } else {&#xD;        value = world.children[0].globalVariables.getVar(name);&#xD;    }&#xD;    if (typeof value ===  &apos;string&apos;) {&#xD;       return value;&#xD;    }&#xD;    return value.contents;&#xD;}.bind(this);&#xD;&#xD;var get_key = function (provider) {&#xD;    var key = get_global_variable_value(provider + " key");&#xD;    if (key) {&#xD;        return key;&#xD;    }&#xD;    if (window.confirm("No value provided for the variable &apos;" + provider + &#xD;                       " key&apos;. Do you want to visit https://github.com/ToonTalk/ai-cloud/wiki to learn how to get a key?")) {&#xD;        window.onbeforeunload = null; // don&apos;t warn about reload&#xD;        document.location.assign("https://github.com/ToonTalk/ai-cloud/wiki");&#xD;    }&#xD;};&#xD;&#xD;var startup = function startup() {&#xD;    var callback = function(stream) {&#xD;        var vendorURL = window.URL || window.webkitURL;&#xD;        video.src = vendorURL.createObjectURL(stream);&#xD;        video.play();&#xD;    };&#xD;    var error_callback = function(err) {&#xD;        console.log("An error occured! " + err);&#xD;    };&#xD;    var constraints = {video: true,&#xD;                       audio: false};&#xD;    video.style.display  = &apos;none&apos;;&#xD;    canvas.style.display = &apos;none&apos;;&#xD;    video.setAttribute(&apos;width&apos;, width);&#xD;    video.setAttribute(&apos;height&apos;, height);&#xD;    canvas.setAttribute(&apos;width&apos;, width);&#xD;    canvas.setAttribute(&apos;height&apos;, height);&#xD;    document.body.appendChild(video);&#xD;    document.body.appendChild(canvas);&#xD;    if (navigator.mediaDevices) {&#xD;        navigator.mediaDevices.getUserMedia(constraints)&#xD;            .then(callback)&#xD;            .catch(error_callback);&#xD;    } else {&#xD;console.log("test this");&#xD;        navigator.getMedia = (navigator.getUserMedia ||&#xD;                              navigator.webkitGetUserMedia ||&#xD;                              navigator.msGetUserMedia);&#xD;        navigator.getMedia(constraints, callback, error_callback);&#xD;//      navigator.mediaDevices.getUserMedia(constraints, callback, error_callback);&#xD;    }&#xD;};&#xD;&#xD;// Capture a photo by fetching the current contents of the video&#xD;// and drawing it into a canvas, then converting that to a PNG&#xD;// format data URL. By drawing it on an offscreen canvas and then&#xD;// drawing that to the screen, we can change its size and/or apply&#xD;// other changes before drawing it.&#xD;&#xD;// available for external use by attaching it to window&#xD;window.take_picture_and_analyse = function (cloud_provider, show_photo, callback) {&#xD;    var context, photo;&#xD;    if (!callback) {&#xD;        callback = console.log;&#xD;    }&#xD;    canvas.setAttribute(&apos;width&apos;, width);&#xD;    canvas.setAttribute(&apos;height&apos;, height);&#xD;    context = canvas.getContext(&apos;2d&apos;);&#xD;    context.drawImage(video, 0, 0, width, height, 0, 0, width, height);&#xD;    if (show_photo) {&#xD;        photo = document.createElement(&apos;img&apos;);&#xD;        photo.src = canvas.toDataURL(&apos;image/png&apos;);&#xD;        photo.setAttribute(&apos;width&apos;, width);&#xD;        photo.setAttribute(&apos;height&apos;, height);&#xD;        document.getElementById("world").style.display = "none";&#xD;        document.body.appendChild(photo);&#xD;        document.body.title = "Click me to restore Snap!";&#xD;        video.style.display  = &apos;&apos;; // display video&#xD;        document.body.addEventListener(&apos;click&apos;,&#xD;                                       function () {&#xD;                                           document.getElementById("world").style.display = &apos;&apos;;&#xD;                                           video.style.display  = &apos;none&apos;;&#xD;                                           if (photo.parentElement) {&#xD;                                               document.body.removeChild(photo);&#xD;                                           }&#xD;                                           document.body.title = "";&#xD;                                       });&#xD;    }&#xD;    switch (cloud_provider) {&#xD;    case "Watson":&#xD;    case "Microsoft":&#xD;        canvas.toBlob(&#xD;            function (blob) {&#xD;                post_image(blob,&#xD;                           cloud_provider,&#xD;                           function (event) {&#xD;                               if (typeof event === &apos;string&apos;) {&#xD;                                   alert(event);&#xD;                               } else {&#xD;                                   callback(event.currentTarget.response);&#xD;                               }&#xD;                           });&#xD;            },&#xD;            "image/png");&#xD;        break;&#xD;    case "Google":&#xD;        post_image(canvas.toDataURL(&apos;image/png&apos;),&#xD;                   cloud_provider,&#xD;                   function (event) {&#xD;                       if (typeof event === &apos;string&apos;) {&#xD;                           alert(event);&#xD;                       } else {&#xD;                           callback(event.currentTarget.response);&#xD;                       }&#xD;                   });&#xD;        break;&#xD;    }&#xD;};&#xD;&#xD;var post_image = function post_image(image, cloud_provider, callback, error_callback) {&#xD;    // based upon https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Sending_forms_through_JavaScript&#xD;    var key = get_key(cloud_provider);&#xD;    var formData, XHR;&#xD;    if (!key) {&#xD;       callback("No key provided so unable to ask " + cloud_provider + " to analyse an image.");&#xD;       return;&#xD;    }&#xD;    XHR = new XMLHttpRequest();&#xD;    XHR.addEventListener(&apos;load&apos;, function(event) {&#xD;        callback(event);&#xD;    });&#xD;    if (!error_callback) {&#xD;        error_callback = function (event) {&#xD;            console.error(event);&#xD;        }&#xD;    }&#xD;    XHR.addEventListener(&apos;error&apos;, error_callback);&#xD;    switch (cloud_provider) {&#xD;    case  "Watson":&#xD;        formData = new FormData();&#xD;        formData.append("images_file", image, "blob.png");&#xD;        XHR.open(&apos;POST&apos;, "https://gateway-a.watsonplatform.net/visual-recognition/api/v3/classify?version=2016-05-19&amp;api_key=" + key);&#xD;        XHR.send(formData);&#xD;        break;&#xD;    case "Google":&#xD;        XHR.open(&apos;POST&apos;, "https://vision.googleapis.com/v1/images:annotate?key=" + key);&#xD;        XHR.setRequestHeader(&apos;Content-Type&apos;, &apos;application/json; charset=UTF-8&apos;);&#xD;        XHR.send(JSON.stringify({"requests":[{"image":{"content": image.substring("data:image/png;base64,".length)},&#xD;                                              "features":[{"type":"LABEL_DETECTION",&#xD;                                                           "maxResults":32},&#xD;//                                                          {"type": "TEXT_DETECTION",&#xD;//                                                           "maxResults":3},&#xD;//                                                          {"type": "FACE_DETECTION",&#xD;//                                                           "maxResults":1},&#xD;//                                                          {"type": "IMAGE_PROPERTIES",&#xD;//                                                           "maxResults":2}&#xD;]}]&#xD;                                }));&#xD;        break;&#xD;    case "Microsoft":&#xD;        // see https://social.msdn.microsoft.com/Forums/en-US/807ee18d-45e5-410b-a339-c8dcb3bfa25b/testing-project-oxford-ocr-how-to-use-a-local-file-in-base64-for-example?forum=mlapi&#xD;        XHR.open(&apos;POST&apos;, "https://westus.api.cognitive.microsoft.com/vision/v1.0/analyze?visualFeatures=Description,Tags,Faces,Color,Categories&amp;subscription-key=" + key);&#xD;        XHR.setRequestHeader(&apos;Content-Type&apos;, &apos;application/octet-stream&apos;);&#xD;        XHR.send(image);&#xD;        break;&#xD;    }&#xD;};&#xD;&#xD;if (document.body) {&#xD;    startup();&#xD;} else {&#xD;    window.addEventListener(&apos;load&apos;, startup, false);&#xD;}&#xD;</l></block><list><block var="width"/><block var="height"/></list></block></script></block-definition><block-definition s="Ask %&apos;cloud provider&apos; to say what it sees then %&apos;receive response&apos; and show the picture %&apos;show photo?&apos;" type="command" category="other"><comment w="415" collapsed="false">Takes a photo and sends it to the &apos;cloud provider&apos;. &apos;receive response&apos; is called with the response. Optionally if &apos;show photo?&apos; is true the photo will be displayed. &apos;cloud provider&apos; can be any value so long as a global variable named the same as the provider with the word &apos;key&apos; appended is defined as the API key.</comment><header></header><code></code><inputs><input type="%txt"></input><input type="%cmdRing"></input><input type="%predRing"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>cloud_provider</l><l>callback</l><l>show_photo</l></list><l>if (typeof window.take_picture_and_analyse != &apos;function&apos;) {&#xD;    alert("You need to run the &apos;setup camera&apos; command before analysing images.");&#xD;} else {&#xD;    window.take_picture_and_analyse(cloud_provider,&#xD;                                    show_photo,&#xD;                                    function (response) {&#xD;					var javascript_to_snap = function (x) {&#xD;					    if (Array.isArray(x)) {&#xD;						return new List(x.map(javascript_to_snap));&#xD;					    }&#xD;					    if (typeof x === &apos;object&apos;) {&#xD;						return new List(Object.keys(x).map(function (key) {&#xD;                                                    return new List([key, javascript_to_snap(x[key])]);&#xD;						}));&#xD;					    }&#xD;					    return x;&#xD;					};&#xD;					switch (cloud_provider) {&#xD;					case "Watson":&#xD;					    invoke(callback, new List([javascript_to_snap(JSON.parse(response).images[0].classifiers[0].classes)]));&#xD;					    return;&#xD;					case "Google":&#xD;					    invoke(callback, new List([javascript_to_snap(JSON.parse(response).responses)]));&#xD;					    return;&#xD;					case "Microsoft":&#xD;					    invoke(callback, new List([javascript_to_snap(JSON.parse(response))]));&#xD;					    return;&#xD;					}&#xD;				    });&#xD;}&#xD;</l></block><list><block var="cloud provider"/><block var="receive response"/><block var="show photo?"/></list></block></script></block-definition></blocks>